
MicroLab_Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e1  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000182  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000155  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dc  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	66 d0       	rcall	.+204    	; 0xf8 <main>
  2c:	c8 c0       	rjmp	.+400    	; 0x1be <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <FreqOn>:
void FreqOn (void)
{
	TCCR0A = (1<<FOC0A)						//принудительное изменение состояния вывода при совпадении
  30:	83 ec       	ldi	r24, 0xC3	; 195
  32:	8a bd       	out	0x2a, r24	; 42
	|(1<<CS00)|(0<<CS01)|(0<<CS02)			//прямое тактирование от генератора
	|(1<<COM0A0)|(0<<COM0A1)				//состояние вывода меняется на противоположное
	|(0<<WGM00)|(1<<WGM01)|(0<<WGM02); 		//режим CTC (сброс при совпадении)

	TCNT0 = 0; 								//просто обнулил счетный регистр
  34:	12 be       	out	0x32, r1	; 50
	OCR0A = 111; 							//при достижении этого значения(111) в счетном регистре будет сброс и переключение ОС2
  36:	8f e6       	ldi	r24, 0x6F	; 111
  38:	89 bd       	out	0x29, r24	; 41
  3a:	08 95       	ret

0000003c <FreqOff>:
}

void FreqOff (void)
{
	TCCR0A = 0;								//выключить генератор 36000 Hz
  3c:	1a bc       	out	0x2a, r1	; 42
	PORTB &= ~PB0;							//высокочастотный вывод сбросить
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	88 bb       	out	0x18, r24	; 24
  42:	08 95       	ret

00000044 <button_init>:
#ifndef BUTTONS_H_
#define BUTTONS_H_

void button_init()
{
	DDRB&=~(1<<2)&~(1<<3)&~(1<<4);					//Вхід на кнопку
  44:	87 b3       	in	r24, 0x17	; 23
  46:	83 7e       	andi	r24, 0xE3	; 227
  48:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<2)|(1<<3)|(1<<4);					//Підтяжка кнопки відсутня, зовнішня підтяжка
  4a:	88 b3       	in	r24, 0x18	; 24
  4c:	8c 61       	ori	r24, 0x1C	; 28
  4e:	88 bb       	out	0x18, r24	; 24
  50:	08 95       	ret

00000052 <IR_diod_init>:
}

void IR_diod_init(void)
{
	IR_DDR |= (IR_Line | IR_HF_Line);				//IR_Diod init
  52:	87 b3       	in	r24, 0x17	; 23
  54:	83 60       	ori	r24, 0x03	; 3
  56:	87 bb       	out	0x17, r24	; 23
	IR_PORT |= IR_Line;
  58:	c1 9a       	sbi	0x18, 1	; 24
  5a:	08 95       	ret

0000005c <TransmitByte>:


//вывод байта по каналу IR
//byte - байт данных
void TransmitByte (char byte)
{
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
  60:	d8 2f       	mov	r29, r24
  62:	c8 e0       	ldi	r28, 0x08	; 8
	for (char i=0; i<8; i++){

		IR_PORT &= ~IR_Line;						//сбросить прямой вывод
  64:	c1 98       	cbi	0x18, 1	; 24
		FreqOn ();									//подать частоту 36000
  66:	e4 df       	rcall	.-56     	; 0x30 <FreqOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	87 e2       	ldi	r24, 0x27	; 39
  6a:	95 e0       	ldi	r25, 0x05	; 5
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <TransmitByte+0x10>
  70:	00 c0       	rjmp	.+0      	; 0x72 <TransmitByte+0x16>
  72:	00 00       	nop
		_delay_us (660);							//пауза 0,66 мс

		IR_PORT |= IR_Line;							//установить прямой вывод
  74:	c1 9a       	sbi	0x18, 1	; 24
		FreqOff ();									//выключить частоту 36000
  76:	e2 df       	rcall	.-60     	; 0x3c <FreqOff>
		if (byte & 0x80)							//ждем
  78:	dd 23       	and	r29, r29
  7a:	3c f4       	brge	.+14     	; 0x8a <TransmitByte+0x2e>
  7c:	87 e5       	ldi	r24, 0x57	; 87
  7e:	9c e0       	ldi	r25, 0x0C	; 12
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <TransmitByte+0x24>
  84:	00 c0       	rjmp	.+0      	; 0x86 <TransmitByte+0x2a>
  86:	00 00       	nop
  88:	06 c0       	rjmp	.+12     	; 0x96 <TransmitByte+0x3a>
  8a:	87 e9       	ldi	r24, 0x97	; 151
  8c:	93 e0       	ldi	r25, 0x03	; 3
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <TransmitByte+0x32>
  92:	00 c0       	rjmp	.+0      	; 0x94 <TransmitByte+0x38>
  94:	00 00       	nop
		_delay_us (1580);							//если бит = 1 то 1,58 мс
		else
		_delay_us (460);							//если бит = 0 то 0,46 мс
		
		byte <<= 1;									//сдвинуть биты
  96:	dd 0f       	add	r29, r29
  98:	c1 50       	subi	r28, 0x01	; 1

//вывод байта по каналу IR
//byte - байт данных
void TransmitByte (char byte)
{
	for (char i=0; i<8; i++){
  9a:	21 f7       	brne	.-56     	; 0x64 <TransmitByte+0x8>
		else
		_delay_us (460);							//если бит = 0 то 0,46 мс
		
		byte <<= 1;									//сдвинуть биты
	}
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <TransmitCmnd>:
        
    }
}

void TransmitCmnd (char device, char command)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	c6 2f       	mov	r28, r22

	//стартовый импульс
	IR_PORT &= ~IR_Line;							//сбросить прямой вывод
  aa:	c1 98       	cbi	0x18, 1	; 24
	FreqOn ();										//подать частоту 36000
  ac:	c1 df       	rcall	.-126    	; 0x30 <FreqOn>
  ae:	8f e4       	ldi	r24, 0x4F	; 79
  b0:	96 e4       	ldi	r25, 0x46	; 70
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <TransmitCmnd+0x10>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <TransmitCmnd+0x16>
  b8:	00 00       	nop
	_delay_us (9000);								//ждем 9 мс
	
	IR_PORT |= IR_Line;								//установить прямой вывод
  ba:	c1 9a       	sbi	0x18, 1	; 24
	FreqOff ();										//выключить частоту 36000
  bc:	bf df       	rcall	.-130    	; 0x3c <FreqOff>
  be:	8f e5       	ldi	r24, 0x5F	; 95
  c0:	92 e2       	ldi	r25, 0x22	; 34
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <TransmitCmnd+0x20>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <TransmitCmnd+0x26>
  c8:	00 00       	nop
	_delay_us (4400);								//ждем 4,4 мс

	//передача команды
	TransmitByte (device);							//прямой адрес устройства
  ca:	8d 2f       	mov	r24, r29
  cc:	c7 df       	rcall	.-114    	; 0x5c <TransmitByte>
	TransmitByte (~device);							//инверсный адрес устройства
  ce:	8d 2f       	mov	r24, r29
  d0:	80 95       	com	r24
  d2:	c4 df       	rcall	.-120    	; 0x5c <TransmitByte>
	TransmitByte (command);							//прямая команда
  d4:	8c 2f       	mov	r24, r28
  d6:	c2 df       	rcall	.-124    	; 0x5c <TransmitByte>
	TransmitByte (~command);						//инверсная команда
  d8:	8c 2f       	mov	r24, r28
  da:	80 95       	com	r24
  dc:	bf df       	rcall	.-130    	; 0x5c <TransmitByte>

	//завершающий импульс
	IR_PORT &= ~IR_Line;							//сбросить прямой вывод
  de:	c1 98       	cbi	0x18, 1	; 24
	FreqOn ();										//подать частоту 36000
  e0:	a7 df       	rcall	.-178    	; 0x30 <FreqOn>
  e2:	87 e2       	ldi	r24, 0x27	; 39
  e4:	95 e0       	ldi	r25, 0x05	; 5
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <TransmitCmnd+0x44>
  ea:	00 c0       	rjmp	.+0      	; 0xec <TransmitCmnd+0x4a>
  ec:	00 00       	nop
	_delay_us (660);								//ждем 0,66 мс

	IR_PORT |= IR_Line;								//установить прямой вывод
  ee:	c1 9a       	sbi	0x18, 1	; 24
	FreqOff ();										//выключить частоту 36000
  f0:	a5 df       	rcall	.-182    	; 0x3c <FreqOff>
	
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <main>:
void FreqOn  (void);
void FreqOff (void);

int main(void)
{
		button_init();								//Ініт кнопок
  f8:	a5 df       	rcall	.-182    	; 0x44 <button_init>
		IR_diod_init();								//Ініт ІЧ-діода
  fa:	ab df       	rcall	.-170    	; 0x52 <IR_diod_init>
		
    while(1)
    {
		
		
		if (PINB&(1<<2))							//Button VOL+
  fc:	b2 9b       	sbis	0x16, 2	; 22
  fe:	1e c0       	rjmp	.+60     	; 0x13c <main+0x44>
		{
			while(PINB&(1<<2)) _delay_ms(20);
 100:	b2 9b       	sbis	0x16, 2	; 22
 102:	08 c0       	rjmp	.+16     	; 0x114 <main+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9c e9       	ldi	r25, 0x9C	; 156
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x10>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x16>
 10e:	00 00       	nop
 110:	b2 99       	sbic	0x16, 2	; 22
 112:	f8 cf       	rjmp	.-16     	; 0x104 <main+0xc>
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9c e9       	ldi	r25, 0x9C	; 156
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x20>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x26>
 11e:	00 00       	nop
			_delay_ms(20);
			TransmitCmnd(DEV, VOL_Plus);
 120:	68 e8       	ldi	r22, 0x88	; 136
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	be df       	rcall	.-132    	; 0xa2 <TransmitCmnd>
			
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//Вхів в режим сну
 126:	85 b7       	in	r24, 0x35	; 53
 128:	87 7e       	andi	r24, 0xE7	; 231
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	85 bf       	out	0x35, r24	; 53
			sleep_enable();
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	80 62       	ori	r24, 0x20	; 32
 132:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 134:	88 95       	sleep
			sleep_disable();			
 136:	85 b7       	in	r24, 0x35	; 53
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 bf       	out	0x35, r24	; 53
			
		}
		if (PINB&(1<<3))							//Button VOL-
 13c:	b3 9b       	sbis	0x16, 3	; 22
 13e:	1e c0       	rjmp	.+60     	; 0x17c <__stack+0x1d>
		{
			while(PINB&(1<<3)) _delay_ms(20);
 140:	b3 9b       	sbis	0x16, 3	; 22
 142:	08 c0       	rjmp	.+16     	; 0x154 <main+0x5c>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9c e9       	ldi	r25, 0x9C	; 156
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x50>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x56>
 14e:	00 00       	nop
 150:	b3 99       	sbic	0x16, 3	; 22
 152:	f8 cf       	rjmp	.-16     	; 0x144 <main+0x4c>
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x60>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x66>
 15e:	00 00       	nop
			_delay_ms(20);
			TransmitCmnd(DEV, VOL_Minus);
 160:	60 e4       	ldi	r22, 0x40	; 64
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	9e df       	rcall	.-196    	; 0xa2 <TransmitCmnd>
			
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//Вхів в режим сну
 166:	85 b7       	in	r24, 0x35	; 53
 168:	87 7e       	andi	r24, 0xE7	; 231
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	85 bf       	out	0x35, r24	; 53
			sleep_enable();
 16e:	85 b7       	in	r24, 0x35	; 53
 170:	80 62       	ori	r24, 0x20	; 32
 172:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 174:	88 95       	sleep
			sleep_disable();			
 176:	85 b7       	in	r24, 0x35	; 53
 178:	8f 7d       	andi	r24, 0xDF	; 223
 17a:	85 bf       	out	0x35, r24	; 53
			
		}
		if (PINB&(1<<4))							//Button INPUT
 17c:	b4 9b       	sbis	0x16, 4	; 22
 17e:	be cf       	rjmp	.-132    	; 0xfc <main+0x4>
		{
			while(PINB&(1<<4)) _delay_ms(20);
 180:	b4 9b       	sbis	0x16, 4	; 22
 182:	08 c0       	rjmp	.+16     	; 0x194 <__stack+0x35>
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <__stack+0x29>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__stack+0x2f>
 18e:	00 00       	nop
 190:	b4 99       	sbic	0x16, 4	; 22
 192:	f8 cf       	rjmp	.-16     	; 0x184 <__stack+0x25>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9c e9       	ldi	r25, 0x9C	; 156
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <__stack+0x39>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <__stack+0x3f>
 19e:	00 00       	nop
			_delay_ms(20);
			TransmitCmnd(DEV, INPUT);
 1a0:	60 e2       	ldi	r22, 0x20	; 32
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	7e df       	rcall	.-260    	; 0xa2 <TransmitCmnd>
						
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//Вхів в режим сну
 1a6:	85 b7       	in	r24, 0x35	; 53
 1a8:	87 7e       	andi	r24, 0xE7	; 231
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	85 bf       	out	0x35, r24	; 53
			sleep_enable();
 1ae:	85 b7       	in	r24, 0x35	; 53
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 1b4:	88 95       	sleep
			sleep_disable();
 1b6:	85 b7       	in	r24, 0x35	; 53
 1b8:	8f 7d       	andi	r24, 0xDF	; 223
 1ba:	85 bf       	out	0x35, r24	; 53
 1bc:	9f cf       	rjmp	.-194    	; 0xfc <main+0x4>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
